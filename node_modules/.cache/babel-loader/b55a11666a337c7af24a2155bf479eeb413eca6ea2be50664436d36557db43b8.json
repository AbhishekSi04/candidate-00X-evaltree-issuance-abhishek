{"ast":null,"code":"// Mock API service for raffle and checkout functionality\n// This simulates the backend API without requiring a separate server\n\n// Mock data storage\nlet raffleData = {\n  'user1': {\n    ticketCount: 5\n  },\n  'user2': {\n    ticketCount: 2\n  },\n  'user3': {\n    ticketCount: 0\n  },\n  'default': {\n    ticketCount: 1\n  }\n};\nconst prizePool = [\"€10 Gift Card\", \"€25 Gift Card\", \"€50 Gift Card\", \"Free Collectible\", \"Premium Membership\", \"€100 Cash Prize\", \"Exclusive NFT\", \"VIP Event Access\"];\n\n// Simulate API delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// API service for handling both development and production environments\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? 'https://your-vercel-domain.vercel.app/api' : 'http://localhost:3001/api';\n\n// Helper function to make API calls\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    }\n  };\n  const response = await fetch(url, {\n    ...defaultOptions,\n    ...options\n  });\n  if (!response.ok) {\n    throw new Error(`API call failed: ${response.status} ${response.statusText}`);\n  }\n  return response.json();\n};\nexport const api = {\n  // GET /api/raffle-status\n  async getRaffleStatus(userId) {\n    return apiCall(`/raffle-status?userId=${userId}`);\n  },\n  // POST /api/raffle-award\n  async triggerRaffleAward(userId) {\n    return apiCall('/raffle-award', {\n      method: 'POST',\n      body: JSON.stringify({\n        userId\n      })\n    });\n  },\n  // POST /api/create-checkout-session\n  async createCheckoutSession(price, userId, isIssued, title) {\n    return apiCall('/create-checkout-session', {\n      method: 'POST',\n      body: JSON.stringify({\n        price: price * 100,\n        // Convert to cents\n        userId: userId,\n        isIssued: isIssued,\n        title: title\n      })\n    });\n  },\n  // POST /api/enroll\n  async enrollUser(userId, platform) {\n    return apiCall('/enroll', {\n      method: 'POST',\n      body: JSON.stringify({\n        userId: userId,\n        platform: platform\n      })\n    });\n  },\n  // GET /api/enrollment-status\n  async getEnrollmentStatus(userId) {\n    return apiCall(`/enrollment-status?userId=${userId}`);\n  },\n  // POST /api/createCollectible\n  async createCollectible(collectibleData) {\n    return apiCall('/createCollectible', {\n      method: 'POST',\n      body: JSON.stringify(collectibleData)\n    });\n  },\n  // GET /api/collectibles\n  async getCollectibles() {\n    return apiCall('/collectibles');\n  }\n};\nexport default api;","map":{"version":3,"names":["raffleData","ticketCount","prizePool","delay","ms","Promise","resolve","setTimeout","API_BASE_URL","process","env","NODE_ENV","apiCall","endpoint","options","url","defaultOptions","headers","response","fetch","ok","Error","status","statusText","json","api","getRaffleStatus","userId","triggerRaffleAward","method","body","JSON","stringify","createCheckoutSession","price","isIssued","title","enrollUser","platform","getEnrollmentStatus","createCollectible","collectibleData","getCollectibles"],"sources":["D:/avaltree_react_final/react-tailwind-starter/src/services/api.js"],"sourcesContent":["// Mock API service for raffle and checkout functionality\r\n// This simulates the backend API without requiring a separate server\r\n\r\n// Mock data storage\r\nlet raffleData = {\r\n  'user1': { ticketCount: 5 },\r\n  'user2': { ticketCount: 2 },\r\n  'user3': { ticketCount: 0 },\r\n  'default': { ticketCount: 1 }\r\n};\r\n\r\nconst prizePool = [\r\n  \"€10 Gift Card\",\r\n  \"€25 Gift Card\", \r\n  \"€50 Gift Card\",\r\n  \"Free Collectible\",\r\n  \"Premium Membership\",\r\n  \"€100 Cash Prize\",\r\n  \"Exclusive NFT\",\r\n  \"VIP Event Access\"\r\n];\r\n\r\n// Simulate API delay\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// API service for handling both development and production environments\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://your-vercel-domain.vercel.app/api' \r\n  : 'http://localhost:3001/api';\r\n\r\n// Helper function to make API calls\r\nconst apiCall = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const defaultOptions = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  const response = await fetch(url, { ...defaultOptions, ...options });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`API call failed: ${response.status} ${response.statusText}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport const api = {\r\n  // GET /api/raffle-status\r\n  async getRaffleStatus(userId) {\r\n    return apiCall(`/raffle-status?userId=${userId}`);\r\n  },\r\n\r\n  // POST /api/raffle-award\r\n  async triggerRaffleAward(userId) {\r\n    return apiCall('/raffle-award', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ userId }),\r\n    });\r\n  },\r\n\r\n  // POST /api/create-checkout-session\r\n  async createCheckoutSession(price, userId, isIssued, title) {\r\n    return apiCall('/create-checkout-session', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        price: price * 100, // Convert to cents\r\n        userId: userId,\r\n        isIssued: isIssued,\r\n        title: title\r\n      }),\r\n    });\r\n  },\r\n\r\n  // POST /api/enroll\r\n  async enrollUser(userId, platform) {\r\n    return apiCall('/enroll', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        userId: userId,\r\n        platform: platform\r\n      }),\r\n    });\r\n  },\r\n\r\n  // GET /api/enrollment-status\r\n  async getEnrollmentStatus(userId) {\r\n    return apiCall(`/enrollment-status?userId=${userId}`);\r\n  },\r\n\r\n  // POST /api/createCollectible\r\n  async createCollectible(collectibleData) {\r\n    return apiCall('/createCollectible', {\r\n      method: 'POST',\r\n      body: JSON.stringify(collectibleData),\r\n    });\r\n  },\r\n\r\n  // GET /api/collectibles\r\n  async getCollectibles() {\r\n    return apiCall('/collectibles');\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}