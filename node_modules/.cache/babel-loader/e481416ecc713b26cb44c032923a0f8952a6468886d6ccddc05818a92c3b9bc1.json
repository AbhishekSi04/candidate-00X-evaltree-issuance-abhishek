{"ast":null,"code":"// Mock API service for raffle and checkout functionality\n// This simulates the backend API without requiring a separate server\n\n// Mock data storage\nlet raffleData = {\n  'user1': {\n    ticketCount: 5\n  },\n  'user2': {\n    ticketCount: 2\n  },\n  'user3': {\n    ticketCount: 0\n  },\n  'default': {\n    ticketCount: 1\n  }\n};\nconst prizePool = [\"€10 Gift Card\", \"€25 Gift Card\", \"€50 Gift Card\", \"Free Collectible\", \"Premium Membership\", \"€100 Cash Prize\", \"Exclusive NFT\", \"VIP Event Access\"];\n\n// Simulate API delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const api = {\n  // GET /api/raffle-status\n  async getRaffleStatus(userId) {\n    await delay(100); // Simulate network delay\n\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n    const userData = raffleData[userId] || raffleData['default'];\n    return {\n      userId: userId,\n      ticketCount: userData.ticketCount,\n      lastUpdated: new Date().toISOString()\n    };\n  },\n  // POST /api/raffle-award\n  async triggerRaffleAward(userId) {\n    await delay(200); // Simulate network delay\n\n    if (!userId) {\n      throw new Error('User ID is required');\n    }\n\n    // Random prize selection\n    const randomPrize = prizePool[Math.floor(Math.random() * prizePool.length)];\n\n    // Reset ticket count after award\n    if (raffleData[userId]) {\n      raffleData[userId].ticketCount = 0;\n    }\n    return {\n      success: true,\n      userId: userId,\n      prize: randomPrize,\n      awardedAt: new Date().toISOString(),\n      message: `Congratulations! You won: ${randomPrize}`\n    };\n  },\n  // POST /api/create-checkout-session\n  async createCheckoutSession(price, userId, isIssued) {\n    await delay(300); // Simulate network delay\n\n    if (!price || !userId) {\n      throw new Error('Price and User ID are required');\n    }\n\n    // Mock Stripe checkout session creation\n    const mockSession = {\n      id: `cs_${Math.random().toString(36).substr(2, 9)}`,\n      url: `https://checkout.stripe.com/pay/${Math.random().toString(36).substr(2, 9)}`,\n      amount_total: price,\n      currency: 'eur',\n      metadata: {\n        userId: userId,\n        isIssued: isIssued\n      }\n    };\n\n    // Add raffle ticket for successful purchase simulation\n    if (!raffleData[userId]) {\n      raffleData[userId] = {\n        ticketCount: 0\n      };\n    }\n    raffleData[userId].ticketCount += 1;\n    return mockSession;\n  }\n};","map":{"version":3,"names":["raffleData","ticketCount","prizePool","delay","ms","Promise","resolve","setTimeout","api","getRaffleStatus","userId","Error","userData","lastUpdated","Date","toISOString","triggerRaffleAward","randomPrize","Math","floor","random","length","success","prize","awardedAt","message","createCheckoutSession","price","isIssued","mockSession","id","toString","substr","url","amount_total","currency","metadata"],"sources":["D:/avaltree_react_final/react-tailwind-starter/src/services/api.js"],"sourcesContent":["// Mock API service for raffle and checkout functionality\r\n// This simulates the backend API without requiring a separate server\r\n\r\n// Mock data storage\r\nlet raffleData = {\r\n  'user1': { ticketCount: 5 },\r\n  'user2': { ticketCount: 2 },\r\n  'user3': { ticketCount: 0 },\r\n  'default': { ticketCount: 1 }\r\n};\r\n\r\nconst prizePool = [\r\n  \"€10 Gift Card\",\r\n  \"€25 Gift Card\", \r\n  \"€50 Gift Card\",\r\n  \"Free Collectible\",\r\n  \"Premium Membership\",\r\n  \"€100 Cash Prize\",\r\n  \"Exclusive NFT\",\r\n  \"VIP Event Access\"\r\n];\r\n\r\n// Simulate API delay\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const api = {\r\n  // GET /api/raffle-status\r\n  async getRaffleStatus(userId) {\r\n    await delay(100); // Simulate network delay\r\n    \r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n\r\n    const userData = raffleData[userId] || raffleData['default'];\r\n\r\n    return {\r\n      userId: userId,\r\n      ticketCount: userData.ticketCount,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  },\r\n\r\n  // POST /api/raffle-award\r\n  async triggerRaffleAward(userId) {\r\n    await delay(200); // Simulate network delay\r\n    \r\n    if (!userId) {\r\n      throw new Error('User ID is required');\r\n    }\r\n\r\n    // Random prize selection\r\n    const randomPrize = prizePool[Math.floor(Math.random() * prizePool.length)];\r\n\r\n    // Reset ticket count after award\r\n    if (raffleData[userId]) {\r\n      raffleData[userId].ticketCount = 0;\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      userId: userId,\r\n      prize: randomPrize,\r\n      awardedAt: new Date().toISOString(),\r\n      message: `Congratulations! You won: ${randomPrize}`\r\n    };\r\n  },\r\n\r\n  // POST /api/create-checkout-session\r\n  async createCheckoutSession(price, userId, isIssued) {\r\n    await delay(300); // Simulate network delay\r\n    \r\n    if (!price || !userId) {\r\n      throw new Error('Price and User ID are required');\r\n    }\r\n\r\n    // Mock Stripe checkout session creation\r\n    const mockSession = {\r\n      id: `cs_${Math.random().toString(36).substr(2, 9)}`,\r\n      url: `https://checkout.stripe.com/pay/${Math.random().toString(36).substr(2, 9)}`,\r\n      amount_total: price,\r\n      currency: 'eur',\r\n      metadata: {\r\n        userId: userId,\r\n        isIssued: isIssued\r\n      }\r\n    };\r\n\r\n    // Add raffle ticket for successful purchase simulation\r\n    if (!raffleData[userId]) {\r\n      raffleData[userId] = { ticketCount: 0 };\r\n    }\r\n    raffleData[userId].ticketCount += 1;\r\n\r\n    return mockSession;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}